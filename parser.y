%error-verbose

%{



#include <cstdio>
#include <iostream>
#include "trees.c"

using namespace std;



extern int yylex(void);
extern int line_num;

arbolSintactico *raiz;

void yyerror(char const*);

%}

%union{
	int value;
	char name[200];
	char carac;
	algExpression *algExp;
	boolExpression *boolExp;
	Expression *exp;
	instruccion *inst;
	declaracion *decl;
	listaIDs *idl;
}


%locations
%start PROGRAMA

%type <idl> LISTA_IDS
%type <inst> EXECUTE SECUENCIA_INSTRUC CONDICIONAL INSTRUCCION INCORPALCANCE DEACTIVATE ACTIVATE ADVANCE ELSE LOOP
%type <decl> CREATE SECUENCIA_DECLAR DECLARATION 
%type <exp>   EXPRESSION;
%type <algExp> ALGEXPRESSION;
%type <boolExp> BOOLEXPRESSION;

%token <value> NUM
%token <name> ID
%token <carac> CARACTER

%token TOKEN_TRUE TOKEN_FALSE TOKEN_PUNTO TOKEN_DOSPUNT TOKEN_PARABRE TOKEN_PARCIERRA TOKEN_SUMA TOKEN_RESTA TOKEN_MULT TOKEN_DIV TOKEN_MOD TOKEN_CONJ TOKEN_DISY TOKEN_NEG TOKEN_MENOR TOKEN_MAYOR TOKEN_MENORIG TOKEN_MAYORIG TOKEN_CREATE TOKEN_WHILE TOKEN_BOOL TOKEN_INT TOKEN_CHAR TOKEN_IF TOKEN_ELSE TOKEN_SEND TOKEN_EXECUTE TOKEN_ON TOKEN_STORE TOKEN_BOT TOKEN_DESIGUAL TOKEN_IGUAL TOKEN_COMA TOKEN_DEFAULT TOKEN_COLLECT TOKEN_DROP TOKEN_UP TOKEN_DOWN TOKEN_RIGHT TOKEN_LEFT TOKEN_READ TOKEN_AS TOKEN_RECEIVE TOKEN_ADVANCE TOKEN_ACTIVATE TOKEN_ACTIVATION TOKEN_DEACTIVATE TOKEN_DEACTIVATION TOKEN_END 



%left	TOKEN_MENORIG TOKEN_MAYORIG
%left	TOKEN_MENOR TOKEN_MAYOR
%left	TOKEN_IGUAL TOKEN_DESIGUAL
%left	TOKEN_SUMA TOKEN_RESTA
%left	TOKEN_MULT TOKEN_DIV TOKEN_MOD
%left	TOKEN_DISY
%left	TOKEN_CONJ
%right	TOKEN_NEG	


%%

PROGRAMA: CREATE EXECUTE {raiz = new arbolSintactico($1,$2);}
	;

CREATE: TOKEN_CREATE SECUENCIA_DECLAR { $$ = $2;}
	;

SECUENCIA_DECLAR: SECUENCIA_DECLAR DECLARATION {$$ = NULL;}
	| DECLARATION  {$$ = NULL;}
	;

DECLARATION: TIPO TOKEN_BOT LISTA_IDS SECUENCIA_COMPORT DEFAULTCOMP TOKEN_END {$$ = NULL;}
	| TIPO TOKEN_BOT LISTA_IDS TOKEN_END {$$ =NULL;}
	;

TIPO: TOKEN_BOOL
	| TOKEN_CHAR
	| TOKEN_INT
	;

SECUENCIA_COMPORT: SECUENCIA_COMPORT COMPORTAMIENTO
	| COMPORTAMIENTO
	;

COMPORTAMIENTO: TOKEN_ON CONDITION TOKEN_DOSPUNT SECUENCIA_ROBOTINSTR TOKEN_END
	;

DEFAULTCOMP: TOKEN_ON TOKEN_DEFAULT TOKEN_DOSPUNT SECUENCIA_ROBOTINSTR TOKEN_END
	| /* Lambda */
	;

CONDITION: TOKEN_ACTIVATION
	| TOKEN_DEACTIVATION
	| BOOLEXPRESSION
	;

SECUENCIA_ROBOTINSTR: SECUENCIA_ROBOTINSTR ROBOTINSTR
	| ROBOTINSTR 
	;

ROBOTINSTR: STORE TOKEN_PUNTO
	| COLLECT TOKEN_PUNTO
	| DROP TOKEN_PUNTO
	| MOVE TOKEN_PUNTO
	| READ TOKEN_PUNTO
	| SEND TOKEN_PUNTO
	;

STORE: TOKEN_STORE EXPRESSION
	| TOKEN_STORE CARACTER
	;

COLLECT: TOKEN_COLLECT 
	| TOKEN_COLLECT TOKEN_AS ID
	;

DROP: TOKEN_DROP EXPRESSION
	| TOKEN_DROP CARACTER
	;

MOVE: DIRECTION ALGEXPRESSION
	;

READ: TOKEN_READ
	| TOKEN_READ TOKEN_AS ID
	;

SEND: TOKEN_SEND
	;

DIRECTION: TOKEN_UP
	| TOKEN_DOWN
	| TOKEN_LEFT
	| TOKEN_RIGHT
	;

EXECUTE: TOKEN_EXECUTE SECUENCIA_INSTRUC TOKEN_END{ $$ = $2;}
	;

SECUENCIA_INSTRUC: INSTRUCCION {$$ = new secuenciaInstrucciones($1);}
	| SECUENCIA_INSTRUC TOKEN_COMA INSTRUCCION {$$ = new secuenciaInstrucciones($1,$3);}
	;

INSTRUCCION: ADVANCE {$$ = $1;}
	| ACTIVATE { $$ = $1;}
	| DEACTIVATE { $$ = $1;}
	| CONDICIONAL { $$ = $1;}
	| LOOP { $$ = $1;}
	| INCORPALCANCE { $$ = $1;}
	| error {$$ = NULL;}
	;

CONDICIONAL: TOKEN_IF BOOLEXPRESSION TOKEN_DOSPUNT  SECUENCIA_INSTRUC ELSE TOKEN_END { $$ = new condicional($2,$4,$5);}
	;

ELSE: TOKEN_ELSE TOKEN_DOSPUNT SECUENCIA_INSTRUC {$$ = $3;}
	| /* Lambda */	{$$ = NULL;}
	;

ACTIVATE: TOKEN_ACTIVATE LISTA_IDS TOKEN_PUNTO { $$ = new activateInst($2);}
	;

ADVANCE: TOKEN_ADVANCE LISTA_IDS TOKEN_PUNTO {$$ = new advanceInst($2);}
	;

DEACTIVATE: TOKEN_DEACTIVATE LISTA_IDS TOKEN_PUNTO {$$ = new deactivateInst($2);}
	;


LOOP: TOKEN_WHILE BOOLEXPRESSION TOKEN_DOSPUNT SECUENCIA_INSTRUC TOKEN_END { $$ = new loopInst($2,$4);}
	;

INCORPALCANCE: CREATE EXECUTE { $$ = new incorpAlcance($1,$2);}
	;

LISTA_IDS: ID {$$ = new listaIDs($1);}
	| LISTA_IDS TOKEN_COMA ID {$$ = new listaIDs($1,$3);}
	;

EXPRESSION: ALGEXPRESSION {$$ = $1;}
	| BOOLEXPRESSION {$$ = $1;}
	;

BOOLEXPRESSION: TOKEN_PARABRE BOOLEXPRESSION TOKEN_PARCIERRA {$$ = $2;}
	| TOKEN_NEG BOOLEXPRESSION { $$ = new boolExpression("NEG",$2);}
	| BOOLEXPRESSION TOKEN_CONJ BOOLEXPRESSION {$$ = new boolExpression("CONJ",$1,$3);}
	| BOOLEXPRESSION TOKEN_DISY BOOLEXPRESSION {$$ = new boolExpression("DISY",$1,$3);}
	| BOOLEXPRESSION TOKEN_IGUAL BOOLEXPRESSION {$$ = new boolExpression("IGUAL",$1,$3);}
	| BOOLEXPRESSION TOKEN_DESIGUAL BOOLEXPRESSION {$$ = new boolExpression("DESIGUAL",$1,$3);}
	| ALGEXPRESSION TOKEN_MENOR ALGEXPRESSION {$$ = new boolExpression("MENOR",$1,$3);}
	| ALGEXPRESSION TOKEN_MAYOR ALGEXPRESSION {$$ = new boolExpression("MAYOR",$1,$3);}
	| ALGEXPRESSION TOKEN_MENORIG ALGEXPRESSION {$$ = new boolExpression("MENORIG",$1,$3);}
	| ALGEXPRESSION TOKEN_MAYORIG ALGEXPRESSION {$$ = new boolExpression("MAYORIG",$1,$3);}
	| ALGEXPRESSION TOKEN_IGUAL ALGEXPRESSION {$$ = new boolExpression("IGUAL",$1,$3);}
	| ALGEXPRESSION TOKEN_DESIGUAL ALGEXPRESSION {$$ = new boolExpression("DESIGUAL",$1,$3);}
	| TOKEN_TRUE {$$ = new boolExpression(true);}
	| TOKEN_FALSE {$$ = new boolExpression(false);}
	| ID {$$ = new boolExpression($1);}
	;

ALGEXPRESSION: ALGEXPRESSION TOKEN_SUMA ALGEXPRESSION {$$ = new algExpression("SUMA",$1,$3);}
	| ALGEXPRESSION TOKEN_MULT ALGEXPRESSION {$$ = new algExpression("MULT",$1,$3);}
	| ALGEXPRESSION TOKEN_RESTA ALGEXPRESSION {$$ = new algExpression("RESTA",$1,$3);}
	| ALGEXPRESSION TOKEN_DIV ALGEXPRESSION {$$ = new algExpression("DIV",$1,$3);}
	| ALGEXPRESSION TOKEN_MOD ALGEXPRESSION {$$ = new algExpression("MOD",$1,$3);}
	| TOKEN_RESTA ALGEXPRESSION {$$ = new algExpression("RESTA",$2);}
	| TOKEN_PARABRE ALGEXPRESSION TOKEN_PARCIERRA {$$ = $2;}
	| ID {$$ = new algExpression($1);}
	| NUM {$$ = new algExpression($1);}
	;


%%


void yyerror(char const* s){
	
	cout << "fila: " <<  yylloc.first_line;
	cout << " col: " << yylloc.first_column << endl;
	cout << s << endl;
}
